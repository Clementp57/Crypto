#!/usr/bin/env python
# coding: utf-8
#############################################################################
# Le Chiffre de César
# Programme pour chiffrer et déchiffrer par décalage
# Clément Peyrabère 5A MOC
#############################################################################
from collections import Counter
import operator
minuscules = 'abcdefghijklmnopqrstuvwxyz'
majuscules = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
eIndex = 5

#############################################################################
# Performs a rotation of x chars from left to right
#############################################################################
def rotate(chaine, x):
    return chaine[x:] + chaine[:x]

#############################################################################
# Return the index of char c in string chaine
#############################################################################
def indexChar(c, chaine):
    for i in range(len(chaine)):
        if (c == chaine[i]):
            return i
    return -1

#############################################################################
# Encrypts a given string (chaine) with a given rotation (x)
#############################################################################
def chiffre(chaine, x):
    rotatedMins = rotate(minuscules, x)
    rotatedMajs = rotate(majuscules, x)
    result = ''
    for letter in chaine:
        if letter in minuscules:
            result = result + rotatedMins[indexChar(letter, minuscules)]
        elif letter in majuscules:
            result = result + rotatedMajs[indexChar(letter, majuscules)]
        else:
            result = result + letter
    return result

#############################################################################
# Decrypts a given string using frequency
# we use Counter to count how many time each char is present in the string
# Support e as min & maj
#############################################################################
def dechiffre(chaine):
    frequencies = Counter(chaine)
    # Gets the max value from frequencies dict generated by Counter
    eCode = max(frequencies.iteritems(), key=operator.itemgetter(1))[0]
    eCodeIndex = indexChar(eCode, minuscules) + 1

    if not eCodeIndex:
        eCodeIndex = indexChar(eCode, majuscules)

    rotation = eIndex - eCodeIndex
    return chiffre(chaine, rotation)

#############################################################################
# Main program
# Crypts a string then decrypts it, print results
#############################################################################
def main(chaine, rotation):
    print "########## Chiffrement César ##########"
    print "Rotation : ", rotation
    crypted = chiffre(chaine, rotation)
    decrypted = dechiffre(crypted)
    print("# Chiffrement de [" + chaine + "]")
    print(" => Resultat : " + crypted)
    print(" ")
    print("# Dechiffrement de [" + crypted + "]")
    print(" => Resultat : " + decrypted)


# We then call the main program with a test string and rotation
main("cette c#haine va etre chiffree puis dechifre^e cette chaine va etre chiffree puis dechifree cette chaine va etre chiffree p$uis dechifree", 25)